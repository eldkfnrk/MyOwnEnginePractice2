#pragma once
#include "CommonInclude.h"

namespace mfe {
	//모든 컴퓨터가 동일한 결과 값을 도출하게 하기 위한 시간을 구하는 작업 수행
	class Time
	{
		//해결해야 할 문제점1
		//현재 프로그램을 그대로 사용할 경우 사용자의 컴퓨터에 따라서 도형의 이동 속도가 천차만별로 달라지게 되어 만약, 이게 라이브 서비스를 하고 있는 게임이라면
		//심각한 문제를 야기하게 된다. 이런 문제가 생긴 이유는 컴퓨터마다 사용하는 cpu가 달라 연산 처리 능력의 차이가 있기 때문이다.

		//해결 방안
		//위의 문제를 해결하기 위해서는 성능(1초당 프레임 수)이 다르더라도 똑같은 결과를 낼 수 있도록 서로 다른 값을 곱해주어 동일한 결과 값이 나오도록 해야 한다.

		//예를 들어 초당 10프레임짜리 컴퓨터와 초당 30프레임짜리 컴퓨터가 있다고 치면 1프레임당 10m를 10초동안 이동하도록 설계를 하면 
		//10프레임짜리는 100m를 이동하게 되고 30프레임짜리는 300m를 이동하게 되는데 이때 10프레임짜리에 3을 곱해주거나 30프레임짜리에 3을 나누어주면 동일한 결과가 나오게 된다.
		//이렇게 차등 값을 곱해주어 결과 값을 맞추게 되면 성능에 상관없이 동일한 결과를 가질 수 있게 되면서 문제를 해결하게 된다.
		//즉, 속도에 DeltaTime을 곱해주면 모든 컴퓨터가 동일한 속도로 움직일 수 있게 된다.

		//이러면 필요한 것은 프레임 수를 확인하는 것이다.
		//그렇게 구한 프레임 수를 나누어주게 되면 문제가 해결된다.

		//이제 이것과 관련된 내용을 Time 클래스로 따로 만들어 관리한다.
		//왜냐하면, 위의 문제 해결법은 이동과 관련된 필요한 로직들에서는 전부 필요하기 때문에 하나로 묶어 관리하는 것이 용이해서 이와 같이 클래스로 따로 만드는 것이다.

	private:
		//LARGE_INTEGER -> 자료형을 감싼 구조체로 unsigned long과 long를 가진 총 4바이트 두 개로 8바이트짜리 정수형 자료형이라 보면 된다.
		//진동수를 구하는 이유는 이것을 이용하여 시간을 구할 수 있기 때문이다.
		static LARGE_INTEGER CpuFrequency;  //cpu의 고유 진동수 -> cpu가 1초당 진동하는 횟수(이것이 cpu의 성능과 관련이 있다.)
		static LARGE_INTEGER PrevFrequency;  //이전 진동수 -> 한 프레임 돌고 왔을 때 앞전 진동수
		static LARGE_INTEGER CurrentFrequency;  //현재 진동수 -> 한 프레임 돌고 왔을 때 현재 진동수
		static float DeltaTimeValue;  //시간

	public:
		static void Initialize();
		static void Update();
		static void Render(HDC hdc);  //시간이 눈에 보이면 편리할 것이기에 이를 보여주기 위한 Render 함수 생성
		static float DeltaTime() {
			return DeltaTimeValue;
		}
	};
}