#pragma once
#include "CommonInclude.h"

//여러 개의 오브젝트를 만들고 디버깅을 할 때 서로 다른 오브젝트들을 구분하는 것이 쉽지 않았다.
//왜냐하면, 오브젝트들을 구분하기 위해서는 갖고 있는 값을 통해 구분하거나 주소값을 통해 구분해야 하는데 주소값은 거의 비슷한 값을 가지고 있고
//갖고 있는 값은 뭐가 뭐를 가지고 있는지를 딱 알아보기 쉽지 않기 때문이다. 이것들이 우리 눈에는 잘 안 익고 구분하기 어려운 점이 있었다.
//그렇기 때문에 디버깅 시 조금 편하게 사용하기 위한 시스템을 만들려 한다. 그것이 바로 Entity 클래스이다.
//디버깅하기 위해 사용되는 모든 것들은 이것을 상속받게 될 것이다.

namespace mfe {
	//디버깅 시 구분을 쉽게 하기 위한 정보를 갖게 해주기 위해 생성
	class Entity
	{
	private:
		std::wstring mName;  //상속받는 객체들에게 이름을 하나씩 갖고 있게 하기 위한 변수(그렇게 되면 디버깅 시에 이름을 가지고 구분하는 것이 가능하게 된다.)

	public:
		Entity();
		virtual ~Entity();  //상속을 받을 것이기에 소멸자에 virtual을 붙여 가상 소멸자로 만들어 준다.
		//가상 소멸자로 만들지 않으면 만약 동적 할당을 자식에서 하게 되면 이것을 소멸시킬 수 없어 메모리 누수가 발생하게 되기 때문이다.

		//이름 변수의 값을 설정하고 가지고 오는 함수 선언(setter, getter 선언)
		//참조를 쓰는 이유는 참조를 안 쓰면 값을 복사하는 형식으로 값을 가지고 가게 되는데 wstring은 배열이고 만약 이 배열의 크기가 크게 되면 복사하는데 
		//많은 시간이 소요될 것인데 참조를 쓰게 되면 그 값을 지칭하는 것으로 변하기 때문에 복사하는 과정을 생략할 수 있게 되서 소요 시간을 줄일 수 있어서 사용한다.
		void SetName(const std::wstring& name) { mName = name; }
		std::wstring& GetName() { return mName; }
	};
}